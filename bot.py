from distutils.command.config import config
from distutils.fancy_getopt import wrap_text
import aiofiles
import aiogram
from config import Config
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from db.storage import UserStorage, User, PhrasesStorage, Phrase
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
import typing
import aioschedule as schedule

class GetAnswer(StatesGroup):
    answer_paid_id = State()
    hash_link_await = State()
    phrases_file = State()
    answer_limit = State()
    answer_unpaid_id = State()
    
class TG_Bot():
    def __init__(self, user_storage: UserStorage, phrases_storage:PhrasesStorage):
        self._user_storage:UserStorage = user_storage
        self._phrases_storage:PhrasesStorage = phrases_storage
        self._bot:aiogram.Bot = aiogram.Bot(token=Config.TGBOT_API_KEY)
        self._storage:MemoryStorage = MemoryStorage()
        self._dispatcher:aiogram.Dispatcher = aiogram.Dispatcher(self._bot, storage=self._storage)
        self._disable_web_page:bool = True
        self._accounts_in_process_pool = {}
        self._create_keyboards()

    async def reset_limits(self):
        users = await self._user_storage.get_all_members()
        for user in users:
            await self._user_storage.reset_limit(user)

    async def init(self):
        schedule.every().day.at("00:00").do(self.reset_limits)
        self._init_handler()

    async def start(self):
        print('Bot has started')
        await self._dispatcher.start_polling()
    
    def _generate_menu_keyb(self, user:User):
        match user.role:
            case User.USER:
                local_keyb = ReplyKeyboardMarkup(resize_keyboard=True)\
                .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ'))\
                    .row(KeyboardButton('‚ùìÔ∏è –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç'), KeyboardButton('‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))\
                        .row(KeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
            case User.ADMIN:
                local_keyb = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))\
                .row(KeyboardButton('‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î'), KeyboardButton('‚ÜïÔ∏è –ê–¥–º–∏–Ω–∫–∞'))\
                    .row(KeyboardButton("‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
            case User.PAID:
                local_keyb = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))\
                .row(KeyboardButton('‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î'), KeyboardButton('‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))\
                    .row(KeyboardButton("‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
        return local_keyb.row(KeyboardButton(f"‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É ({user.actual_limit})"))

    async def _show_menu(self, message:aiogram.types.Message , user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', reply_markup=local_keyb)

    async def _will_think(self, message:aiogram.types.Message, user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer('üòè –ö–æ–Ω–µ—á–Ω–æ, –º—ã —Ç–µ–±—è –Ω–µ —Ç–æ—Ä–æ–ø–∏–º. –¢–æ–ª—å–∫–æ –ø–æ–º–Ω–∏, –ø–æ–∫–∞ —Ç—ã –¥—É–º–∞–µ—à—å, –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç.', reply_markup=local_keyb)

    async def _check_subscription(self, message:aiogram.types.Message, user:User):
        match user.role:
            case User.PAID:
                await message.answer(text='‚úÖ –°–≤–æ—é —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏, —Å–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?',reply_markup=self._checked_subscription_keyboard_access)
            case _:
                await message.answer(text='‚úÖ –°–≤–æ—é —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏, —Å–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?',reply_markup=self._checked_subscription_keyboard)

    async def _start_paid_education(self, message:aiogram.types.Message, user:User):
        local_keyb = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text='MacOS'), KeyboardButton(text='WINDOWS')).row(KeyboardButton(text="Android"), KeyboardButton(text="IOS"))
        await message.answer("üíå –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø—Ä–∏–æ–±—Ä—ë–ª –º–æ–π –ø—Ä–æ–¥—É–∫—Ç. –Ø —É–≤–µ—Ä–µ–Ω - –æ–Ω —Ç–µ–±—è –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—Ç.\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∑–∞–±—ã—Ç—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤. –î–∞–≤–∞–π —è —Ç–µ–±—è –≤—Å–µ–º—É –Ω–∞—É—á—É, –∞ —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–±—ã–ª–∏.\n\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏.\n\nüí∏üí∏üí∏üí∏üí∏", reply_markup=local_keyb)

    async def _step1_paid_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª Python"))
        links_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å Python', url='https://www.python.org/ftp/python/3.10.5/python-3.10.5-amd64.exe'))
        async with aiofiles.open('pics/python.jpg','rb') as f:
            await message.answer_photo(f, caption='–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –Ω–∞ —Ç–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–≤–æ–µ–π –û–°. –¢–∞–∫ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ - —ç—Ç–æ –ü–û —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.')
        await message.answer(text='–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python. –í –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –≥–∞–ª–æ—á–∫–æ–π –≤ –≥—Ä–∞—Ñ–µ path.',reply_markup=links_keyb)
        await message.answer('–í—Å—ë –≥–æ—Ç–æ–≤–æ? –ò–¥—ë–º –¥–∞–ª—å—à–µ!', reply_markup=reply_markup)
    
    async def _step2_paid_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∏–±–ª–∏–æ—Ç–µ–∫—É"))
        async with aiofiles.open('pics/bit.jpg','rb') as f:
            await message.answer_photo(f, caption='–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É BIT.\n\n–î–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ?\n\n–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ ‚Äì –æ–Ω–∏ –Ω–µ—Å—É—Ç –≤ —Å–µ–±–µ –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –û–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–Ω–µ–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥, –∫–ª–∞—Å—Å—ã –∏–ª–∏ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑. –í —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é.', parse_mode=aiogram.types.ParseMode.MARKDOWN)
        await message.answer('üîº –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π `win+R`, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–ø–∏—Å—ã–≤–∞–µ–º `pip install bit`.\n\n–ù–∞–∂–∏–º–∞–µ–º Enter –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.', reply_markup=reply_markup, parse_mode=aiogram.types.ParseMode.MARKDOWN)
    
    async def _step3_paid_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É"))
        links_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:', url='https://clck.ru/sM9od'))
        async with aiofiles.open('pics/program.jpg','rb') as f:
            await message.answer_photo(f, caption='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç. –ï–≥–æ –Ω–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–±–µ—Ä–∏ –¥–ª—è –Ω–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ —Ä–∞—Å–ø–∞–∫—É–π –≤ –Ω–µ–≥–æ –∞—Ä—Ö–∏–≤.')
        await message.answer(text='–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:',reply_markup=links_keyb)
        await message.answer('–í—Å—ë –≥–æ—Ç–æ–≤–æ? –ò–¥—ë–º –¥–∞–ª—å—à–µ!', reply_markup=reply_markup)
    
    async def _step4_paid_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"))
        links_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö(100–∫)', url='https://clck.ru/sHDtn'))
        async with aiofiles.open('pics/wallets_base.jpg','rb') as f:
            await message.answer_photo(f, caption='–®–∞–≥ —á–µ—Ç–≤—ë—Ä—Ç—ã–π - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å BTC –∫–æ—à–µ–ª—å–∫–∞–º–∏.\n\n–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å txt —Ñ–∞–π–ª–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∞–¥—Ä–µ—Å–∞ 100.000 BTC –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n–ú–Ω–æ–≥–æ –ª–∏ —ç—Ç–æ - 100–∫?\n\n–î–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –±—É–¥–µ—Ç 1 –∫–æ—à–µ–ª—ë–∫, –∞ –Ω–µ 100.000 - –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –µ–≥–æ 2048^12 —Ä–∞–∑, –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å—á—ë—Ç–µ –ø–æ–¥–æ–±—Ä–∞–≤ –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É. –û–¥–Ω–∞–∫–æ —á–µ–º –∫–æ—à–µ–ª—å–∫–æ–≤ –±–æ–ª—å—à–µ (—á–µ–º –±–æ–ª—å—à–µ –±–∞–∑–∞) - —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø.\n\n–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–∏–Ω—É—Ç—å –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞.')
        await message.answer(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:',reply_markup=links_keyb)
        await message.answer('–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –ø–æ–∏—Å–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Å–≤–æ—é –±–∞–∑—É. –ö–∞–∂–¥—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 50.000 –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–±–æ–π–¥—É—Ç—Å—è –≤–∞–º –≤—Å–µ–≥–æ –≤ 5$.', reply_markup=reply_markup)
    
    async def _step5_paid_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")).row(KeyboardButton("‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
        await message.answer(text='–£–∂–µ –ø–æ—á—Ç–∏ –≤—Å—ë! –ù–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –Ω–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å?\n\n–í—Å—ë —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - —ç—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É.',reply_markup=reply_markup)
        async with aiofiles.open('pics/execute.jpg','rb') as f:
            await message.answer_photo(f, caption='–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª start.py –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º.\n\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏—à WIN+R. –ü–æ—Å–ª–µ —á–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n`python *—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*`.\n\n–î–∞–ª–µ–µ –Ω–∞–∂–∏–º–∞–µ–º Enter –∏ —É –Ω–∞—Å –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å. –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø–µ—Ä–µ–±–æ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ —Ñ—Ä–∞–∑ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏: `generation` –∏ `verification`.', parse_mode = aiogram.types.ParseMode.MARKDOWN)
        await message.answer('–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –ø—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞.')
    
    async def _step6_paid_education(self, message:aiogram.types.Message, user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer("üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞.\n\n–•–æ—á—É –µ—â—ë —Ä–∞–∑ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∑–∞ —Ç–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–∑—ã - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–æ–∫—É–ø–∏—Ç—å –≤ –±–æ—Ç–µ.\n\n–ù–µ –≤—ã–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞, –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ.", reply_markup=local_keyb)

    async def _start_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –®–∞–≥ 1"))
        await message.answer(text='–ö–∞–∫ –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å, —è –Ω–∞—É—á—É —Ç–µ–±—è –º–∞–π–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –Ω–∞ —Å–≤–æ—ë–º –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n\n–ü–æ–≤–µ—Ä—å, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ –∫–∞–∂–µ—Ç—Å—è —Å–ª–æ–∂–Ω—ã–º –∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º, –∞ –ø–æ —Ñ–∞–∫—Ç—É —ç—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è  üöÄ',reply_markup=reply_markup)

    async def _step2_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚§µÔ∏è –Ø —Å–æ–∑–¥–∞–ª –∫–æ—à–µ–ª—ë–∫"))
        await message.answer(text='–ï—Å–ª–∏ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–º–µ–ª –¥–µ–ª–æ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, —Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—É—Ç—å –æ—Ç –ê –¥–æ –Ø. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞–≤–µ–¥—ë–º —Ç–µ–±–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π –∫–æ—à–µ–ª–µ–∫. –ù—É–∂–µ–Ω –æ–Ω –≤—Å–µ–≥–æ –ª–∏—à—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω.\n\n–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\n\n1. –í—ã–±–∏—Ä–∞–µ—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫"\n2. –ü—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç–µ –ø–∏–Ω-–∫–æ–¥\n3. –°—Ç–∞–≤–∏—Ç–µ –≥–∞–ª–æ—á–∫—É "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –µ—Å–ª–∏ —è –ø–æ—Ç–µ—Ä—è—é —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É, —è –ø–æ—Ç–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∫–æ—à–µ–ª—å–∫—É"\n4. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –≤ –±–ª–æ–∫–Ω–æ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –µ—ë',reply_markup=reply_markup)
        download_links_keyboard = InlineKeyboardMarkup().row(InlineKeyboardButton(text='Play Market', url='https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp')).row(InlineKeyboardButton(text='App Store', url='https://apps.apple.com/app/apple-store/id1288339409?mt=8'))
        await message.answer(text='–°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', reply_markup=download_links_keyboard)

    async def _step3_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É"))
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫.\n\n–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª–∏ —Å–≤–æ–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n–ü—Ä–∏—á–∏–Ω–æ–π —Ç–æ–º—É ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π –±–ª–æ–∫—á–µ–π–Ω–∞. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω—ë–º –≤–∞—à–∏ ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞.\n\n–¢—É—Ç –º—ã –∏ –ø–æ–¥–æ—à–ª–∏ –∫ —Å—É—Ç–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ç–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–∫–∏–µ –∂–µ —Ñ—Ä–∞–∑—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–ª—É—á–∞–π–Ω—ã–º  –∫–æ—à–µ–ª—å–∫–∞–º.\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º?',reply_markup=reply_markup)

    async def _step4_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
        await self._user_storage.decrease_phrases(user)
        phrase = await self._phrases_storage.get_random_phrase()
        await message.answer(f"`{phrase}`", parse_mode=aiogram.types.ParseMode.MARKDOWN)
        await message.answer(text='‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è‚ÜóÔ∏è\n\n–≠—Ç–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π –∏–ª–∏ seed —Ñ—Ä–∞–∑–æ–π\n–û–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 12 —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è Bip39 (https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt) –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è 2048 —Å–ª–æ–≤.\n\n–ú—ã –∑–Ω–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–∞–∫–∏—Ö —Ñ—Ä–∞–∑ –∏ –≥–æ—Ç–æ–≤—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ 10 —Ñ—Ä–∞–∑ –¥–ª—è –≤–∞—Å. –ü—Ä–æ–≤–µ—Ä—è–π, —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Ç–æ–º –∫–æ—à–µ–ª—å–∫–µ:\n\n1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ—Ä–∞–∑—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã—à–µ\n2. –ó–∞–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Trust –∏ –Ω–∞–∂–º–∏ –Ω–∞ "–ö–æ—à–µ–ª—å–∫–∏"\n3. –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –Ω–∞–∂–º–∏ –Ω–∞ –ø–ª—é—Å\n4. –í—ã–±–µ—Ä–∏ "–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∫–æ—à–µ–ª—ë–∫"\n5. –ú—É–ª—å—Ç–∏-–º–æ–Ω–µ—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n6. –í—Å—Ç–∞–≤–∏—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',reply_markup=reply_markup)

    async def _step5_education(self, message:aiogram.types.Message, user:User):
        reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å"))
        await message.answer(text='–†–µ–¥–∫–æ —Å–ª—É—á–∞–µ—Ç—Å—è —Ç–∞–∫, —á—Ç–æ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –∫–æ—à–µ–ª–µ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë –∏ –µ—â—ë –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥—ë—à—å.\n\n–ß—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–µ—Ä–∂–∏ –∫–æ—à–µ–ª–µ–∫ —Å —Ä–∞–±–æ—á–µ–π —Ñ—Ä–∞–∑–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å.\n\n`volume distance dash huge giggle vehicle solve author swallow perfect coyote useless`\n\n–≠—Ç–æ –Ω–µ –ø–æ–¥–∞—Ä–æ–∫, —Ç–∞–∫ —á—Ç–æ –¥–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç —Ç—É–¥–∞ –¥–µ–Ω—å–≥–∏.\n\n–£ —Ç–µ–±—è –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º –∫–æ—à–µ–ª—å–∫–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –æ–±–º–µ–Ω—è—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å.',reply_markup=reply_markup, parse_mode= aiogram.types.ParseMode.MARKDOWN)

    async def _get_support_info(self, message:aiogram.types.Message, user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer(text='‚ÅâÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º - @petorlov\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–ª–æ–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∞ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', reply_markup=local_keyb)

    async def _generate_phrase(self, message:aiogram.types.Message, user:User):
        if user.actual_limit > 0:
            user.actual_limit -= 1
            await message.answer(f'üîë –û—Å—Ç–∞–ª–æ—Å—å —Ñ—Ä–∞–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {user.actual_limit}.')
            await self._user_storage.decrease_phrases(user)
            local_keyb = self._generate_menu_keyb(user)
            phrase = await self._phrases_storage.get_random_phrase()
            await message.answer(f"`{phrase}`", parse_mode=aiogram.types.ParseMode.MARKDOWN, reply_markup=local_keyb)

    async def _get_profile_info(self, message:aiogram.types.Message, user:User):
        name_dict = {User.USER:'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', User.PAID:'–ö—É–ø–ª–µ–Ω', User.ADMIN:'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
        await message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚îú ID: `{user.id}`\n‚îú –í–∞—à –Ω–∏–∫–Ω–µ–π–º: `{message['from']['username']}`\n‚îú –í–∞—à–µ –∏–º—è: `{message['from']['first_name']}`\n‚îú –ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞: `{name_dict[user.role]}`\n\n‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n‚îú `https://t.me/chance_wallet_bot?start={user.id}`", parse_mode=aiogram.types.ParseMode.MARKDOWN)

    async def _get_qa_info(self, message:aiogram.types.Message, user:User):
        qa_link_keyboard = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–í–û–ü–†–û–°-–û–¢–í–ï–¢', url='https://telegra.ph/VOPROS-OTVET-07-13-2'))
        await message.answer(text='üìë –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å:', reply_markup=qa_link_keyboard)
        await message.answer(text='‚ÅâÔ∏è –ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? - @petorlov\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–ª–æ–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∞ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')

    async def _switch_to_admin_panel(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=self._admin_panel)
    
    async def _ask_unpaid_id(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø, –û–¢–ú–ï–ù–ê –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        await GetAnswer.answer_unpaid_id.set()

    async def _set_unpaid_id(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        if message.text == "–û–¢–ú–ï–ù–ê":
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        elif message.text.isdigit():
            db_user = await self._user_storage.get_by_id(int(message.text))
            if db_user is not None:
                if db_user.role == User.BLOCKED:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                if db_user.role == User.PAID:
                    await self._user_storage.remove_paid(db_user)
                    local_keyb = self._generate_menu_keyb(db_user)
                    await self._bot.send_message(chat_id=db_user.id, text="–í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.", reply_markup=local_keyb)
                    await self._user_storage.change_phrase_limit(db_user, -10)
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–ø–ª–∞—á–µ–Ω—ã–º')
                else:
                    await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        await state.finish()

    async def _ask_paid_id(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –û–¢–ú–ï–ù–ê –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        await GetAnswer.answer_paid_id.set()
    
    async def _set_paid_id(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        if message.text == "–û–¢–ú–ï–ù–ê":
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        elif message.text.isdigit():
            db_user = await self._user_storage.get_by_id(int(message.text))
            if db_user is not None:
                if db_user.role == User.BLOCKED:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                if db_user.role != User.PAID:
                    await self._user_storage.add_paid(db_user)
                    local_keyb = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚úíÔ∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")).row(KeyboardButton("‚ÜòÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
                    await self._bot.send_message(chat_id=db_user.id, text="üíå –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø—Ä–∏–æ–±—Ä—ë–ª –º–æ–π –ø—Ä–æ–¥—É–∫—Ç. –Ø —É–≤–µ—Ä–µ–Ω - –æ–Ω —Ç–µ–±—è –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—Ç.\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∑–∞–±—ã—Ç—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤. –î–∞–≤–∞–π —è —Ç–µ–±—è –≤—Å–µ–º—É –Ω–∞—É—á—É, –∞ —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–±—ã–ª–∏.\n\nüí∏üí∏üí∏üí∏üí∏", reply_markup=local_keyb)
                    await self._user_storage.change_phrase_limit(db_user, 10)
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
                else:
                    await message.answer('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        await state.finish()

    async def _access_users_list(self, message:aiogram.types.Message, user:User):
        users = await self._user_storage.get_role_list(User.PAID)
        if users is None or len(users) == 0:
            await message.answer('–û–ø–ª–∞—Ç–∏–≤—à–∏—Ö –¥–æ—Å—Ç—É–ø –Ω–µ—Ç')
        else:
            users = map(lambda x:str(x), users)
            async with aiofiles.open('paid_users.txt', 'w') as f:
                await f.write("\n".join(users))
            async with aiofiles.open('paid_users.txt', 'rb') as f:
                await message.answer_document(f)

    async def _users_amount(self, message:aiogram.types.Message, user:User):
        users = await self._user_storage.get_user_amount()
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}')

    async def _increase_limits(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        await GetAnswer.answer_limit.set()
    
    async def _update_user_limit(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        user_id, limit_delta = map(lambda x: int(x), message.text.split())
        user = await self._user_storage.get_by_id(user_id)
        if user is None:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω')
        elif user.role == User.BLOCKED:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—ã–¥–∞—á–∞ –ª–∏–º–∏—Ç–æ–≤ –µ–º—É –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞')
        else:
            await self._user_storage.change_phrase_limit(user, limit_delta)
            await message.answer(f'–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_delta}')
        await state.finish()

    async def _buy_db(self, message:aiogram.types.Message, user:User):
        async with aiofiles.open('pics/bd.jpg', 'rb') as f:
            await message.answer_photo(photo=f,caption="–ë–ê–ó–ê –î–ê–ù–ù–´–• —Å BTC –∫–æ—à–µ–ª—å–∫–∞–º–∏ - –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –≤ –º–∞–π–Ω–∏–Ω–≥–µ –ø–æ–¥–æ–±–Ω–æ–≥–æ –≤–∏–¥–∞. –ß–µ–º –±–æ–ª—å—à–µ –∫–æ—à–µ–ª—å–∫–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ –Ω–∏—Ö.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∏ –∫–∞–∫ –æ–ø—Ç–æ–º, —Ç–∞–∫ –∏ –±–∞–∑–∞–º–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n+50.000 —Å—Ç—Ä–æ–∫ - 5$\n+500.000 —Å—Ç—Ä–æ–∫ - 45$\n+1.000.000 —Å—Ç—Ä–æ–∫ - 75$\n+5.000.000 —Å—Ç—Ä–æ–∫ - 300$\n\n–ë–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –ª–∏—á–Ω–æ.\n\n–ê–î–†–ï–°–°–ê –ö–†–ò–ü–¢–û–ö–û–®–ï–õ–¨–ö–û–í –î–õ–Ø –û–ü–õ–ê–¢–´\n\n–ï—Å–ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–∏—à–∏ –≤ –õ–°: @petorlov\n\nUSDT (TRC-20)\n`TTrHm2BYcfBTFoTqNp2ZW5VefPe5yG2oF6`", parse_mode=aiogram.types.ParseMode.MARKDOWN)
        local_keyb = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")).row(KeyboardButton("‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton("‚ÜòÔ∏è –ï—â—ë –ø–æ–¥—É–º–∞—é"))
        await message.answer('‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "—è –æ–ø–ª–∞—Ç–∏–ª", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ö–µ—à –∏–ª–∏ —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞.', reply_markup=local_keyb)

    async def _buy_program(self, message:aiogram.types.Message, user:User):
        async with aiofiles.open('pics/program_buy.jpg', 'rb') as f:
            await message.answer_photo(f, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –æ–¥–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç—ã BTC.\n\n–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è. –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º.")
        local_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text="‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?")).row(KeyboardButton(text="‚ùìÔ∏è –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"))
        await message.answer("–ü–æ–∫—É–ø–∞—è –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å–æ —Å—Ç–∞—Ç—å–µ–π –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å –∏ –¥–ª—è –Ω–∞—Å.\n\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî @petorlov", reply_markup=local_keyboard)
    
    async def _how_much(self, message:aiogram.types.Message, user:User):
        async with aiofiles.open('pics/price.jpg', 'rb') as f:
            await message.answer_photo(f, "–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê: 60$ (3840 —Ä—É–±.)\n–ê–î–†–ï–° –ö–†–ò–ü–¢–û–ö–û–®–ï–õ–¨–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–´\n\n–ï—Å–ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–∏—à–∏ –≤ –õ–°: @petorlov\n\n60 USDT (TRC-20)\n`TTrHm2BYcfBTFoTqNp2ZW5VefPe5yG2oF6`\n\nQIWI Card / VISA / MS / –Æ–º–∞–Ω–∏ –∏ –¥—Ä—É–≥–æ–µ.\n\n–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞.", parse_mode=aiogram.types.ParseMode.MARKDOWN)
        local_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")).row(KeyboardButton(text="‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton(text="‚ÜòÔ∏è –ï—â—ë –ø–æ–¥—É–º–∞—é"))
        await message.answer('‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "—è –æ–ø–ª–∞—Ç–∏–ª", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ö–µ—à –∏–ª–∏ —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞.', reply_markup=local_keyboard)
    
    async def _hash_link_await(self, message:aiogram.types.Message, user:User):
        await message.answer("‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ö–µ—à –∏–ª–∏ —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=aiogram.types.ReplyKeyboardRemove())
        await GetAnswer.hash_link_await.set()

    async def _payment_await(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        user = await self._user_storage.get_by_id(message.chat.id)
        local_keyb = self._generate_menu_keyb(user)
        await message.answer("üòª –í–∞—à –∑–∞–ø—Ä–æ—Å –≤—Å–∫–æ—Ä–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", reply_markup=local_keyb)
        await state.finish()
        access = {User.USER:'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', User.PAID:'–ö—É–ø–ª–µ–Ω', User.ADMIN:"–ö—É–ø–ª–µ–Ω"}
        items = {User.PAID:"–¥–æ–∫—É–ø–∫—É –î–ë", User.ADMIN:"–¥–æ–∫—É–ø–∫—É –î–ë", User.USER:"–æ–ø–ª–∞—Ç—É"}
        text = f"üí∞ –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ {items[user.role]}.\n\n–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{message.text}\n\nüë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nID: {user.id}\n–ù–∏–∫–Ω–µ–π–º: {message.from_user.username}\n–ò–º—è: {message.from_user.first_name}\n–ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞: {access[user.role]}"
        await self._bot.send_message(chat_id=Config.admins_chat_id, text=text)
    
    async def _add_phrase(self, message:aiogram.types.Message, user:User):
        phrase_text = message.text[8:]
        await self._phrases_storage.create(phrase_text)
        await message.answer(f'–§—Ä–∞–∑–∞ "{phrase_text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞')

    async def _add_phrases(self, message:aiogram.types.Message, user:User):
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ txt —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏—é')
        await GetAnswer.phrases_file.set()
    
    async def _process_phrases(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        if message.document and message.document.file_name.split(".")[-1] == "txt":
            # await self._bot.download_file_by_id(message.document.file_id, "./")   
            async with aiofiles.open(message.document.file_name, 'r') as f:
                phrases = await f.readlines()
            await state.finish()
            await message.answer('–§—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
            for phrase in phrases:
                await self._phrases_storage.create(phrase)
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await state.finish()

    async def _phrases_amount(self, message:aiogram.types.Message, user:User):
        users = await self._phrases_storage.get_phrases_amount()
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑: {users}')

    async def _download_program(self, message:aiogram.types.Message, user:User):
        local_keyb = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text='MacOS'), KeyboardButton(text='Windows')).row(KeyboardButton(text="Android"), KeyboardButton(text="IOS"))
        await message.answer("üíå –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø—Ä–∏–æ–±—Ä—ë–ª –º–æ–π –ø—Ä–æ–¥—É–∫—Ç. –Ø —É–≤–µ—Ä–µ–Ω - –æ–Ω —Ç–µ–±—è –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—Ç.\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∑–∞–±—ã—Ç—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤. –î–∞–≤–∞–π —è —Ç–µ–±—è –≤—Å–µ–º—É –Ω–∞—É—á—É, –∞ —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–±—ã–ª–∏.\n\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏.\n\nüí∏üí∏üí∏üí∏üí∏", reply_markup=local_keyb)

    async def _send_win_tutorial(self, message:aiogram.types.Message, user:User):
        async with aiofiles.open('pics/mining.jpg', 'rb') as f:
            await message.answer_photo(f,"–ú–∞–π–Ω–∏–Ω–≥ v2.0 - –ø—Ä–æ–¥—É–∫—Ç –±—É–¥—É—â–µ–≥–æ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –º–∞–π–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∏, –ø–æ–¥–±–∏—Ä–∞—è –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã.\n\n–û—Å–Ω–æ–≤–Ω–æ–π —É–∫–ª–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ß–µ–º –±–æ–ª—å—à–µ —É –≤–∞—Å –∫–æ—à–µ–ª—å–∫–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏.\n\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –ë–î –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ö–∞–∂–¥—ã–µ +50.000 –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–±–æ–π–¥—É—Ç—Å—è –≤—Å–µ–≥–æ –≤ 5$.")
        links_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", url="https://clck.ru/sM9od")).row(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å Python", url='https://www.python.org/ftp/python/3.10.5/python-3.10.5-amd64.exe')).row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö(100–∫)', url='https://clck.ru/sHDtn'))
        await message.answer('–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ:', reply_markup = links_keyb)
        local_keyb = self._generate_menu_keyb(user)
        await message.answer("üîî –ù–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —É –Ω–∞—Å —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ë–î!", reply_markup=local_keyb)
    
    async def _send_macos_tutorial(self, message:aiogram.types.Message, user:User):
        async with aiofiles.open('pics/mining.jpg', 'rb') as f:
            await message.answer_photo(f,"–ú–∞–π–Ω–∏–Ω–≥ v2.0 - –ø—Ä–æ–¥—É–∫—Ç –±—É–¥—É—â–µ–≥–æ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –º–∞–π–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∏, –ø–æ–¥–±–∏—Ä–∞—è –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã.\n\n–û—Å–Ω–æ–≤–Ω–æ–π —É–∫–ª–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ß–µ–º –±–æ–ª—å—à–µ —É –≤–∞—Å –∫–æ—à–µ–ª—å–∫–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏.\n\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –ë–î –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ö–∞–∂–¥—ã–µ +50.000 –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–±–æ–π–¥—É—Ç—Å—è –≤—Å–µ–≥–æ –≤ 5$.")
        links_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", url="https://clck.ru/sM9od")).row(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å Python", url='https://www.python.org/ftp/python/3.10.5/python-3.10.5-amd64.exe')).row(InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö(100–∫)', url='https://clck.ru/sHDtn'))
        await message.answer('1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –¥–æ–∫–µ—Ä (https://docs.docker.com/desktop/install/mac-install/).\n\n2) –°–∫–∞—á–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (—Ç—É, —á—Ç–æ —Å–∫–∏–Ω—É–ª –Ω–∏–∂–µ).\n\n3) –û—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –ø–∏—à–µ—Ç–µ –≤ –Ω–µ–≥–æ:\n\ncd –ø–∞–ø–∫–∞ –≥–¥–µ –ª–µ–∂–∏—Ç –ø—Ä–æ–µ–∫—Ç\n\n4) –î–∞–ª–µ–µ –≤–ø–∏—Å—ã–≤–∞–µ—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª:\n\ndocker compose up ‚Äîbuild\n\n–ü–µ—Ä–µ–¥ ¬´build¬ª –¥–≤–∞ —Ç–∏—Ä–µ.\n\n5) –ñ–¥–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –¥–æ–ª–≥–æ, –∞ –¥–∞–ª–µ–µ —É–∂–µ –±—ã—Å—Ç—Ä–æ.', reply_markup = links_keyb)
        local_keyb = self._generate_menu_keyb(user)
        await message.answer("üîî –ù–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —É –Ω–∞—Å —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ë–î!", reply_markup=local_keyb)
    
    async def _send_android_tutorial(self, message:aiogram.types.Message, user:User):
        await message.answer("–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ —Ñ–∞–π–ª–µ:")
        local_keyb = self._generate_menu_keyb(user)
        async with aiofiles.open('android.txt', 'rb') as f:
            await message.answer_document(f, reply_markup=local_keyb)

    async def _send_ios_tutorial(self, message:aiogram.types.Message, user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer('–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ.', reply_markup=local_keyb)

    async def _promote_to_admin(self, message:aiogram.types.Message, user:User):
        admin_id = message.text.split()[1]
        user = await self._user_storage.get_by_id(int(admin_id))
        if user is not None:
            if user.role in (User.ADMIN, User.BLOCKED):
                match user.role:
                    case User.ADMIN:
                        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω')
                    case User.BLOCKED:
                        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            else:
                await self._user_storage.promote_to_admin(int(admin_id))
                await message.answer(f'–†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ id {admin_id}')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    
    async def _demote_from_admin(self, message:aiogram.types.Message, user:User):
        admin_id = message.text.split()[1]
        user = await self._user_storage.get_by_id(int(admin_id))
        if user is not None:
            if user.role == User.ADMIN:
                await self._user_storage.demote_from_admin(int(admin_id))
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
            else:
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –∏ —Ç–∞–∫ –Ω–µ –∞–¥–º–∏–Ω.')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    def _init_handler(self):
        self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._demote_from_admin)), commands=['remove_admin'])
        self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._promote_to_admin)), commands=['add_admin'])
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._add_phrase)), commands=['phrase'])
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._add_phrases)), commands=['phrases'])
        self._dispatcher.register_message_handler(self._process_phrases, state=GetAnswer.phrases_file, content_types=aiogram.types.message.ContentType.ANY)
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._phrases_amount)), commands=['phrase_amount'])
        self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), commands=['start', 'menu'])
        self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), text='‚úÖ –ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å')
        self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), text='‚ÜòÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        self._dispatcher.register_message_handler(self._user_middleware(self._will_think), text='‚ÜòÔ∏è –ï—â—ë –ø–æ–¥—É–º–∞—é')
        self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), text='–ú–µ–Ω—é')
        self._dispatcher.register_message_handler(self._user_middleware(self._check_subscription), text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._start_education), text='‚ú®–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        self._dispatcher.register_message_handler(self._user_middleware(self._start_education), text='‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._start_paid_education)), text='‚úíÔ∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step1_paid_education)), text='WINDOWS')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step2_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª Python')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step3_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∏–±–ª–∏–æ—Ç–µ–∫—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step4_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step5_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step6_paid_education)), text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        self._dispatcher.register_message_handler(self._user_middleware(self._step2_education), text='‚§µÔ∏è –®–∞–≥ 1')
        self._dispatcher.register_message_handler(self._user_middleware(self._step3_education), text='‚§µÔ∏è –Ø —Å–æ–∑–¥–∞–ª –∫–æ—à–µ–ª—ë–∫')
        self._dispatcher.register_message_handler(self._user_middleware(self._step4_education), text='‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._step5_education), text='‚úÖ –ì–æ—Ç–æ–≤–æ')
        self._dispatcher.register_message_handler(self._user_middleware(self._get_support_info), text='‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
        self._dispatcher.register_message_handler(self._user_middleware(self._get_support_info), text='‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
        self._dispatcher.register_message_handler(self._user_middleware(self._get_profile_info), text='üë§ –ú–æ–π ID')
        self._dispatcher.register_message_handler(self._user_middleware(self._get_qa_info), text='‚ùìÔ∏è –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç')
        self._dispatcher.register_message_handler(self._user_middleware(self._generate_phrase), aiogram.dispatcher.filters.Text(startswith="‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É "))
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._switch_to_admin_panel)), text='‚ÜïÔ∏è –ê–¥–º–∏–Ω–∫–∞')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._ask_paid_id)), text='–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._ask_unpaid_id)), text='–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._access_users_list)), text='–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._users_amount)), text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._increase_limits)), text='–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã')
        self._dispatcher.register_message_handler(self._set_paid_id, state=GetAnswer.answer_paid_id)
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._buy_db)), text='‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î')
        self._dispatcher.register_message_handler(self._user_middleware(self._buy_program), text='‚úÖ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._how_much), text='‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?')
        self._dispatcher.register_message_handler(self._user_middleware(self._hash_link_await), text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._download_program)), text='‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É')
        self._dispatcher.register_message_handler(self._payment_await, state=GetAnswer.hash_link_await)
        self._dispatcher.register_message_handler(self._set_unpaid_id, state=GetAnswer.answer_unpaid_id)
        self._dispatcher.register_message_handler(self._update_user_limit, state=GetAnswer.answer_limit)
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_win_tutorial)), text='Windows')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_macos_tutorial)), text='MacOS')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_android_tutorial)), text='Android')
        self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_ios_tutorial)), text='IOS')
    
    def _user_middleware(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, *args, **kwargs):
            user:ChatMember = await self._bot.get_chat_member(chat_id=Config.channel_id, user_id=message.chat.id)
            if user.status in ['member', 'creator', 'administrator']:
                user = await self._user_storage.get_by_id(message.chat.id)
                if user is None:
                    split_message = message.text.split()
                    if len(split_message) == 2 and split_message[1].isdigit() and await self._user_storage.get_by_id(int(split_message[1])):
                        inviter_id = int(split_message[1])
                        await self._user_storage.give_referal(inviter_id)
                        inviter_user = self._user_storage.get_by_id(inviter_id)
                        local_keyb = self._generate_menu_keyb(inviter_user)
                        await self._bot.send_message(chat_id=inviter_id, text='‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n\n–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ - –∑–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ 30 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!', reply_markup = local_keyb)
                    user = User(
                        id = message.chat.id,
                        role = User.USER,
                        actual_limit=10,
                        daily_limit=10
                    )
                    await self._user_storage.create(user)
                elif user.role == User.BLOCKED:
                    pass
                else:
                    await func(message, user)
            else:
                check_channel_subcription_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
                await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @cryptolabv2', reply_markup=check_channel_subcription_keyboard)
                channel_subcription_keyboard = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/cryptolabv2'))
                await message.answer('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', reply_markup=channel_subcription_keyboard)
        return wrapper
    
    def _admin_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.role == User.ADMIN:
                await func(message, user)
        return wrapper
    
    def _paid_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.role in (User.PAID, User.ADMIN) or user.id in Config.gods:
                await func(message, user)
        return wrapper

    def _god_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.id in Config.gods:
                await func(message, user)
        return wrapper

    def _create_keyboards(self):
        self._menu_keyboard_user = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ'))\
                .row(KeyboardButton('‚ùìÔ∏è –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç'), KeyboardButton('‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))\
                    .row(KeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))

        self._menu_keyboard_user_access = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ'))\
                .row(KeyboardButton('‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î'), KeyboardButton('‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))\
                    .row(KeyboardButton("‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))

        self._menu_keyboard_admin = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('üë§ –ú–æ–π ID'),KeyboardButton('‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ'))\
                .row(KeyboardButton('‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î'), KeyboardButton('‚ÜïÔ∏è –ê–¥–º–∏–Ω–∫–∞'))\
                    .row(KeyboardButton("‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
        
        self._checked_subscription_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('‚ú®–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')).row(KeyboardButton('‚ÜòÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))\
                .row(KeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
        
        self._checked_subscription_keyboard_access = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('‚ú®–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')).row(KeyboardButton('‚ÜòÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))\
                .row(KeyboardButton("‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"))
        
        self._admin_panel = ReplyKeyboardMarkup(resize_keyboard=True)\
            .row(KeyboardButton('–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø'), KeyboardButton('–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø'), KeyboardButton('–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã'))\
                .row(KeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'), KeyboardButton('–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤'))\
                    .row(KeyboardButton('–ú–µ–Ω—é'))
